@page "/blog/create"
@page "/blog/edit/{Id:int}"
@inject Client.Services.PostService PostService
@inject NavigationManager NavManager
@using Shared.Models

<h1>@(IsEdit ? "Edit Post" : "Create New Post")</h1>

<EditForm Model="model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <!-- ValidationSummary will show errors at the top -->
    <ValidationSummary />

    <div classs="form-row">
        <label>Title</label>
        <InputText @bind-Value="model.Title" class="input" placeholder="Your amazing blog post title..." />
        <!-- ValidationMessage will show errors inline -->
        <ValidationMessage For="@(() => model.Title)" />
    </div>

    <div class="form-row">
        <label>Category</label>
        <!-- Changed to a Dropdown (InputSelect) to match the new design -->
        <InputSelect @bind-Value="model.Category" class="input">
            @if (!IsEdit && string.IsNullOrEmpty(model.Category))
            {
                <option value="" selected disabled>--- Select a category ---</option>
            }
            <!-- Hard-coded categories from your design. -->
            <!-- We can replace this later when 'Manage Categories' is built -->
            <option value="Technology">Technology</option>
            <option value="Recipes">Recipes</option>
            <option value="C# Tutorials">C# Tutorials</option>
            <option value="Travel Stories">Travel Stories</option>
            <option value="General">General</option>
        </InputSelect>
        <ValidationMessage For="@(() => model.Category)" />
    </div>

    <div class="form-row">
        <label>Excerpt</label>
        <InputTextArea @bind-Value="model.Excerpt" class="input" rows="3" placeholder="A short summary that appears in the post list..." />
        <ValidationMessage For="@(() => model.Excerpt)" />
    </div>

    <div class="form-row">
        <label>Content (HTML allowed)</label>
        <InputTextArea @bind-Value="model.Content" class="input" rows="10" placeholder="Write your full post content here. You can use <b> and <p> tags." />
        <ValidationMessage For="@(() => model.Content)" />
    </div>

    <div class="form-row">
        <label>Image URL (optional)</label>
        <InputText @bind-Value="model.ImageUrl" class="input" placeholder="e.g., https://my-images.com/my-post-image.png" />
        <ValidationMessage For="@(() => model.ImageUrl)" />
    </div>

    <!-- Added a container for form actions/buttons -->
    <div classs="form-actions" style="margin-top: 1.5rem; display: flex; gap: 0.75rem;">
        <!-- Updated button classes and added icon -->
        <button class="btn btn-primary" type="submit">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 6px; vertical-align: text-bottom;">
                <polyline points="20 6 9 17 4 12"></polyline>
            </svg>
            <span>Save Post</span>
        </button>

        <!-- Updated button class -->
        <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }

    // Using the Post model from Shared project
    Shared.Models.Post model = new Shared.Models.Post();

    bool IsEdit => Id.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            var p = await PostService.GetByIdAsync(Id!.Value);
            if (p != null)
            {
                model = p;
            }
        }
    }

    async Task HandleValidSubmit()
    {
        if (IsEdit)
        {
            await PostService.UpdateAsync(model);
        }
        else
        {
            model.PublishedOn = DateTime.UtcNow; // Set publish date on create
            await PostService.CreateAsync(model);
        }

        // ...
        NavManager.NavigateTo("blog", forceLoad: true);
    }

    void Cancel() => NavManager.NavigateTo("blog");
}
